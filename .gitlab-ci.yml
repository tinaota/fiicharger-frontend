variables:
  NPM_TOKEN: ${CI_JOB_TOKEN}

stages:
  - verify
  - build
  - launch
  - validate
  - release
  - document

verify_commit_format:
  image: $DOCKER_REGISTRY_URL/fii-commitlint:v0.0.2
  stage: verify
  tags: [ docker_runner ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  needs: [ ]
  dependencies: [ ]
  script:
    - echo "Checking commit message format..."
    - git fetch origin
    - npx commitlint --from=$(git merge-base remotes/origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME remotes/origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
    - check_merge_status -s $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME -t $CI_MERGE_REQUEST_TARGET_BRANCH_NAME

verify_build:
  stage: verify
  tags: [ shell_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE =~ /ci\(release\):[\s\S]+alpha/
  needs: [ ]
  dependencies: [ ]
  script:
    - echo "verifying code builds successfully..."
    - DOCKER_BUILDKIT=1 docker build . -t fiicharger-frontend-verify --build-arg BUILD_MODE=dev

dev_build_image:
  stage: build
  tags: [ shell_runner ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  needs:
    - verify_commit_format
  dependencies: [ ]
  script:
    - echo "Building image for version $CI_COMMIT_TAG"
    - DOCKER_BUILDKIT=1 docker build . -t fiicharger/frontend --build-arg BUILD_MODE=dev
    - docker image tag fiicharger/frontend $DOCKER_REGISTRY_URL/fiicharger/frontend:dev
    - docker push $DOCKER_REGISTRY_URL/fiicharger/frontend:dev

test_build_image:
  stage: build
  tags: [ shell_runner ]
  rules:
    - if: $CI_COMMIT_TAG =~ /v[\d]+.[\d]+.[\d]+-alpha.[\d]+$/
  needs: [ ]
  dependencies: [ ]
  script:
    - echo "Building image for version $CI_COMMIT_TAG"
    - DOCKER_BUILDKIT=1 docker build . -t fiicharger/frontend --build-arg BUILD_MODE=test
    - docker image tag fiicharger/frontend $DOCKER_REGISTRY_URL/fiicharger/frontend:$CI_COMMIT_TAG
    - docker image tag fiicharger/frontend $DOCKER_REGISTRY_URL/fiicharger/frontend:latest-alpha
    - docker push $DOCKER_REGISTRY_URL/fiicharger/frontend:$CI_COMMIT_TAG
    - docker push $DOCKER_REGISTRY_URL/fiicharger/frontend:latest-alpha

prod_build_image:
  stage: build
  tags: [ shell_runner ]
  rules:
    - if: $CI_COMMIT_TAG =~ /v[\d]+.[\d]+.[\d]+$/
  needs: [ ]
  dependencies: [ ]
  script:
    - echo "Building image for version $CI_COMMIT_TAG"
    - DOCKER_BUILDKIT=1 docker build . -t fiicharger/frontend --build-arg BUILD_MODE=prod
    - docker image tag fiicharger/frontend $DOCKER_REGISTRY_URL/fiicharger/frontend:$CI_COMMIT_TAG
    - docker image tag fiicharger/frontend $DOCKER_REGISTRY_URL/fiicharger/frontend:latest
    - docker push $DOCKER_REGISTRY_URL/fiicharger/frontend:$CI_COMMIT_TAG
    - docker push $DOCKER_REGISTRY_URL/fiicharger/frontend:latest

dev_launch_image:
  stage: launch
  tags: [ shell_runner ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  needs:
    - dev_build_image
  dependencies: [ ]
  script:
    - echo "rolling out new image..."
    - sudo ssh -p $DEV_CLUSTER_SSH_PORT -v -o StrictHostKeyChecking=no -i /home/gitlab-runner/.ssh/id_rsa -T $DEV_CLUSTER_USER@$DEV_CLUSTER_IP
      "kubectl rollout restart deploy fiicharger-dashboard -n fiicharger-dev;"

generate_release:
  image: $DOCKER_REGISTRY_URL/fii-semantic-release:v0.0.1
  stage: release
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE =~ /ci\(release\):[\s\S]+alpha/
  needs:
    - verify_build
  dependencies: [ ]
  before_script:
    - |
      {
        echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
        echo "${CI_API_V4_URL#https?}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
      } | tee -a .npmrc
  script:
    - echo "Generating new release"
    - touch CHANGELOG.md
    - npx semantic-release
  artifacts:
    paths:
      - CHANGELOG.md

update_wiki:
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:latest
  stage: document
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE =~ /ci\(release\):[\s\S]+alpha/
  needs:
    - generate_release
  dependencies:
    - generate_release
  script:
    - if [ ! -s CHANGELOG.md ]; then echo "Changelog does not exist or is empty. Wiki will not be updated." && exit 0; fi
    - bash ./update_wiki.sh $GITLAB_TOKEN $CI_PROJECT_ID $CI_COMMIT_BRANCH

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  stage: document
  services:
  tags: [ code_quality ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
    - if: $CI_COMMIT_BRANCH == "master"
  dependencies: [ ]
  artifacts:
    paths: [ gl-code-quality-report.json ]
