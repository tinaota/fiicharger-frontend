variables:
  NPM_TOKEN: ${CI_JOB_TOKEN}

stages:
  - verify
  - build
  - launch
  - validate
  - release
  - document

verify_commit_format:
  image: 10.20.199.207:5000/fii-commitlint:v0.0.1
  stage: verify
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(hotfix)\//
    - if: $CI_COMMIT_BRANCH =~ /^(feature)\//
  needs: [ ]
  dependencies: [ ]
  script:
    - echo "Checking commit message format..."
    - git fetch origin
    - npx commitlint --from=$(git merge-base remotes/origin/$CI_COMMIT_BRANCH remotes/origin/master)

verify_build:
  stage: verify
  tags: [ shell_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(hotfix)\//
    - if: $CI_COMMIT_BRANCH =~ /^(feature)\//
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE =~ /ci\(release\):[\s\S]+alpha/
  needs: [ ]
  dependencies: [ ]
  before_script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
  script:
    - echo "verifying code builds successfully..."
    - npm run build

test_build_image:
  stage: build
  tags: [ shell_runner ]
  rules:
    - if: $CI_COMMIT_TAG =~ /v[\d]+.[\d]+.[\d]+-alpha.[\d]+$/
  needs: [ ]
  dependencies: [ ]
  variables:
    ARCHIVE_NAME: fiicharger_frontend_test_$(date +"%m%d%Y").tar.gz
  before_script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
  script:
    - echo "Building image for version $CI_COMMIT_TAG"
    - npm run build
    - cp FiiCharger/favicon.* FiiCharger/static/
    - cp -r FiiCharger/imgs FiiCharger/static/
    - cp -r FiiCharger/libs FiiCharger/static/
    - cp .htaccess FiiCharger/
    - echo "Building archive..."
    - export ARCHIVE_NAME=fiicharger_frontend_test_$(date +"%m%d%Y").tar.gz
    - sudo tar -pczf $ARCHIVE_NAME FiiCharger/
    - sudo scp -P $TEST_CLUSTER_SSH_PORT -o StrictHostKeyChecking=no -i /home/gitlab-runner/.ssh/id_rsa -r $ARCHIVE_NAME $TEST_CLUSTER_USER@$TEST_CLUSTER_IP:~/downloads

generate_alpha_release:
  image: node:16.13.2
  stage: release
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
  needs:
    - verify_build
  dependencies: [ ]
  before_script:
    - npm ci --cache .npm --prefer-offline
    - |
      {
        echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
        echo "${CI_API_V4_URL#https?}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
      } | tee --append .npmrc
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
  script:
    - echo "Generating new release"
    - touch CHANGELOG.md
    - npm run semantic-release
  artifacts:
    paths:
      - CHANGELOG.md

generate_prod_release:
  image: node:16.13.2
  stage: release
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE =~ /ci\(release\):[\s\S]+alpha/
  needs:
    - verify_build
  dependencies: [ ]
  before_script:
    - npm ci --cache .npm --prefer-offline
    - |
      {
        echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
        echo "${CI_API_V4_URL#https?}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
      } | tee --append .npmrc
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
  script:
    - echo "Generating new release"
    - touch CHANGELOG.md
    - npm run semantic-release
  artifacts:
    paths:
      - CHANGELOG.md

update_master_wiki:
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:latest
  stage: document
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
  needs:
    - generate_alpha_release
  dependencies:
    - generate_alpha_release
  script:
    - if [ ! -s CHANGELOG.md ]; then echo "Changelog does not exist or is empty. Wiki will not be updated." && exit 0; fi
    - bash ./update_wiki.sh $GITLAB_TOKEN $CI_PROJECT_ID $CI_COMMIT_BRANCH

update_prod_wiki:
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:latest
  stage: document
  tags: [ docker_runner ]
  rules:
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE !~ /ci\(release\):/
    - if: $CI_COMMIT_BRANCH == "prod" && $CI_COMMIT_MESSAGE =~ /ci\(release\):[\s\S]+alpha/
  needs:
    - generate_prod_release
  dependencies:
    - generate_prod_release
  script:
    - if [ ! -s CHANGELOG.md ]; then echo "Changelog does not exist or is empty. Wiki will not be updated." && exit 0; fi
    - bash ./update_wiki.sh $GITLAB_TOKEN $CI_PROJECT_ID $CI_COMMIT_BRANCH

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  stage: document
  services:
  tags: [ code_quality ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
    - if: $CI_COMMIT_BRANCH == "master"
  dependencies: [ ]
  artifacts:
    paths: [ gl-code-quality-report.json ]
